name: Deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  Build-And-Push:
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.detect-changes.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Detect changed services
        id: detect-changes
        run: |
          CHANGED=$(git diff --name-only HEAD^ HEAD | cut -d/ -f1 | sort -u | grep -E '^(frontend|gateway|users|search|music|eureka)' | uniq | tr '\n' ' ')
          echo "Detected changed services: $CHANGED"
          echo "services=$CHANGED" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push changed images
        run: |
          for svc in ${{ steps.detect-changes.outputs.services }}; do
            echo "Building and pushing $svc..."
            docker buildx build \
              --build-arg VITE_API_URL=/api \
              --build-arg VITE_ANON_KEY=${{ secrets.VITE_ANON_KEY }} \
              --build-arg VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }} \
              --file ./$svc/Dockerfile \
              --tag ${{ secrets.DOCKERHUB_USERNAME }}/$svc:latest \
              --push \
              ./$svc
          done

  Deploy:
    needs: Build-And-Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group RhythmFlow --name RhythmFlow --overwrite-existing

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/

      - name: Restart only changed deployments
        run: |
          for svc in ${{ needs.Build-And-Push.outputs.changed-services }}; do
            echo "Restarting $svc deployment..."
            kubectl rollout restart deployment/$svc
          done
