name: Deploy
on:
  pull_request:
    types:
      - closed
    branches:
      - main
  workflow_dispatch:

jobs:
  DetectChanges:
    uses: ./.github/workflows/detect-changes.yml

  Build-And-Push:
    runs-on: ubuntu-latest
    if: ${{ needs.DetectChanges.outputs.matrix != '[]'}}
    needs: DetectChanges
    strategy:
      matrix:
        service: ${{ fromJson(needs.DetectChanges.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create ENV file for Frontend
        if: ${{ matrix.service == 'frontend' }}
        run: |
          echo "${{ secrets.FRONTEND_ENV }}" > ./${{ matrix.service }}/.env

      - name: Build and push image for ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          # builds image for both platforms (so i can also run it on my macbook :D)
          platforms: linux/amd64, linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:latest

  Deploy:
    needs:
      - Build-And-Push
      - DetectChanges
    strategy:
      matrix:
        service: ${{ fromJson(needs.DetectChanges.outputs.matrix) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group RhythmFlow --name RhythmFlow --overwrite-existing

      - name: Create Secret Name
        run: |
          SECRET_NAME="$(echo "${{ matrix.service }}" | tr '[:lower:]' '[:upper:]')_ENV"
          echo "SECRET_NAME=${SECRET_NAME}" >> $GITHUB_ENV
          echo "HAS_SECRET=${{ contains(toJson(secrets), env.SECRET_NAME) }}" >> $GITHUB_ENV

      - name: Create ENV file
        if: ${{ env.HAS_SECRET == 'true' }}
        run: |
          echo "${{ secrets[env.SECRET_NAME] }}" > ./${{ matrix.service }}/.env
          kubectl create configmap ${{ matrix.service }}-env --from-env-file=./${{ matrix.service }}/.env --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy ${{ matrix.service }} to AKS
        run: |
          kubectl apply -f k8s/${{ matrix.service }}-deployment.yaml
          kubectl apply -f k8s/${{ matrix.service }}-service.yaml

      - name: Restart Deployment
        run: |
          kubectl rollout restart deployment ${{ matrix.service }}
